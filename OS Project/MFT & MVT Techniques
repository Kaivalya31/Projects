PROGRAM TO SIMULATE THE MFT MEMORY MANAGEMENT TECHNIQUE 
#include<iostream> 
using namespace std;
int main() 
{ 
int tot_memory, block_size, no_of_blocks, external_frag,no_of_processes, process_memory[10],total_internal_frag=0; 
int i,k=0; 
cout << "******BY MEMORY, WE MEAN MAIN MEMORY(BYTES) !******\n"; 
cout << "What is the total amount of memory available? "; 
cin >> tot_memory; 
cout << "What is the size of each block? "; 
cin >> block_size; 
no_of_blocks = tot_memory/block_size; 
external_frag = tot_memory - no_of_blocks*block_size; 
cout << "\nHow many processes are there? "; 
cin >> no_of_processes; 
for(i = 0; i < no_of_processes; i++) 
{ 
cout << "How much memory does P%d need? ",i; 
cin >> process_memory[i]; 
} 
cout << "\nAvailable memory blocks :"  << no_of_blocks; 
cout << "\n\nPROCESS\tMEMORY NEEDED\tMEMORY ALLOCATED\tINTERNAL FRAGMENTATION";
for(i=0;i<no_of_processes && k<no_of_blocks;i++) 
{ 
cout << process_memory[i]; 
if(process_memory[i] > block_size) 
cout << "\t\tNO\t\t"; 
else 
{ 
cout << "\t\tYES\t\t\t",block_size-process_memory[i]; 
total_internal_frag = total_internal_frag + block_size-process_memory[i]; k++; 
} 
} 
if(i < no_of_processes) 
cout << "\nMemory is Full, Rest of the Processes cannot be allocated memory !"; 
cout << "\n\nTotal Internal Fragmentation is " << total_internal_frag; 
cout << "\nTotal External Fragmentation is " << external_frag; 
return 0; 
} 


PROGRAM TO SIMULATE THE MVT MEMORY MANAGEMENT TECHNIQUE 
#include<iostream> 
using namespace std;
int main() 
{ 
int tot_memory, process_memory[10], i, temp, no_of_processes=0; char ch = 'Y'; 
cout << "******BY MEMORY, WE MEAN MAIN MEMORY(BYTES) !******\n"; 
cout << "What is the total amount of memory available? "; 
cin >> tot_memory; 
temp = tot_memory; 
for( i=0; ch == 'Y'; i++,no_of_processes++) 
{ 
cout << "\nHow much memory does P" << i <<  "need? "; 
cin >> process_memory[i]; 
if(process_memory[i] <= temp) 
{ 
cout << "\nMemory is allocated for the process " << i; 
temp = temp - process_memory[i]; 
} 
else 
{ 
cout << "\nMemory is full !"; 
break; 
} 
cout << "\nIf more processes are there, Press Y,else press E "; 
cin >> ch;
} 
cout << "\n\nTotal Available Memory = " << tot_memory; 
cout << "\n\n\tPROCESS\t\tMEMORY ALLOCATED "; 
for( i=0; i<no_of_processes; i++) 
cout << "\n \t%d\t\t\t" << i+1 << process_memory[i]; 
cout << "\n\nTotal Memory Allocated = " << tot_memory-temp; 
cout << "\nTotal External Fragmentation = " << temp; 
return 0; 
} 
